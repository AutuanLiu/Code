This XML file does not appear to have any style information associated with it. The document tree is shown below.
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
<title>Atom Blog</title>
<description>A hackable text editor for the 21st Century</description>
<link>http://blog.atom.io</link>
<atom:link href="http://blog.atom.io/feed.xml" rel="self" type="application/rss+xml"/>
<item>
<title>Atom 1.3</title>
<description>
<p>Atom 1.3 and <a href="https://atom.io/beta">1.4-beta</a> are out. Atom 1.3 comes with start up speed improvements, find performance improvements, and portable mode.</p> <h2>Major Changes in 1.3.0 Stable</h2> <p>Check out the releases page for <a href="https://github.com/atom/atom/releases/tag/v1.3.0">all changes in 1.3</a>.</p> <h3>Startup speed improvements</h3> <p>One of the team focuses has been improving performance, and we&#39;re happy to report that we&#39;ve been making great progress in the startup department. All in, these changes contribute to a <strong>20% - 30% speedup</strong> depending on how many packages you have installed. We&#39;ll go into more depth in another post, but if you&#39;re interested, check out the pull requests.</p> <ul> <li><a href="https://github.com/atom/atom/pull/9318">NativeCompileCache</a></li> <li><a href="https://github.com/atom/atom/pull/9468">Unfold all improvements</a></li> <li><a href="https://github.com/atom/atom/pull/9507">Lazy-load of snippets</a></li> <li><a href="https://github.com/atom/atom/pull/9508">Improved config loading</a>, and <a href="https://github.com/atom/atom/pull/9524">even more improvement</a></li> </ul> <h3>Marker (find and replace!) speed improvements</h3> <p>Along the performance improvement theme, we&#39;ve been focusing on improving the data structures related to markers. Markers are pretty core to Atom&mdash;they are the underpinnings for cursors, selections, the autocomplete suggestion box, and find result markers. Making them fast will improve performance for all of these cases, especially when there are tons of markers defined.</p> <p>The original B+ tree index we blogged about earlier this year has now been replaced with a new data structure based on a randomized variant of balanced binary trees known as a <a href="https://en.wikipedia.org/wiki/Treap">treap</a>. In addition to using a clearer, more efficient algorithm, we&#39;ve also dropped the index to C++ for maximal performance and minimal impact on the v8 heap. Treaps are proving to be a useful approach for indexing state that tracks the contents of buffers, and we&#39;re currently in the process of converting to a similar data structure to more efficiently track the spatial relationship between screen coordinates and buffer coordinates in the presence of transformations such as hard tab expansion, folds, and soft wraps.</p> <h3>Marker Layers</h3> <p>Just as important as algorithmic improvements, we&#39;ve also introduced a new API construct called <a href="https://atom.io/docs/api/v1.3.1/TextEditor#instance-addMarkerLayer">marker layers</a>. We found firing creation events to be a large source of overhead when creating tons of markers, but most of our creation handlers were only acting on a small subset of the total markers in the system. Marker layers make this explicit, allowing you to subscribe to events on a limited set of markers. With this change, we can limit the cost of creating markers and allow packages to selectively expose their markers to other packages, giving you the choice of whether you want your markers to be part of your API or just an implementation detail.</p> <p>It&#39;s worth noting that search result and selection markers are no longer available via the default marker layer. If you need access to search result markers, you can use the new <a href="https://github.com/atom/find-and-replace#provided-service">service</a> exposed by the <code>find-and-replace</code> package. Selections have their own editor-level APIs, so direct marker access shouldn&#39;t be necessary. <a href="https://github.com/atom/atom/issues">Talk to us</a> if you disagree.</p> <ul> <li><a href="https://github.com/atom/atom/pull/9426">Marker layers, and a treap-based marker index</a></li> </ul> <h3>Portable mode</h3> <p>Windows portable mode has been a <a href="https://github.com/atom/atom/issues/2939">heavily requested feature</a> for a long time. Atom 1.3.0 has a portable mode for Windows <em>and</em> Linux (with Mac on the way).</p> <ul> <li><a href="https://github.com/atom/atom/pull/8442">Portable mode for Windows</a></li> <li><a href="https://github.com/atom/atom/pull/9422">Portable mode for Linux</a></li> <li><a href="https://github.com/atom/atom/pull/9419">A command line param to setup a portable .atom directory</a></li> </ul> <h3>Updates to moving lines in the buffer</h3> <p>When <code>Auto Indent</code> option is checked, moving lines up and down will autoindent the moving line. See <a href="https://github.com/atom/atom/pull/9104">the pull request</a> for more details.</p> <p><img src="https://cloud.githubusercontent.com/assets/1993929/10412661/8f81b0c2-6f52-11e5-8fe5-45322401d8ea.gif" alt="."></p> <p>Additionally, moving lines in the buffer now works with multiple cursors. A big shout out goes to <a href="https://github.com/lpommers">@lpommers</a> and <a href="https://github.com/abe33">@abe33</a> for their tenacity in getting this change in. Check out the <a href="https://github.com/atom/atom/pull/8232">the pull request</a> to see all that went into it (86 comments spanning 3 months!).</p> <p><img src="https://cloud.githubusercontent.com/assets/5764316/9087105/e7be09fa-3b88-11e5-8059-777b0d902e56.gif" alt="."></p> <h3>Upgrade to Electron 0.34.3</h3> <p>Atom 1.3.0 is on <a href="https://github.com/atom/atom/pull/9481">Electron 0.34.3</a>, which fixed a few <a href="https://github.com/atom/electron/releases/tag/v0.34.3">issues on Windows</a>.</p> <h2>Atom 1.4.0-beta0 Available now</h2> <p>With every stable release comes a new <a href="https://atom.io/beta">beta</a> release. Note that you can always <a href="https://atom.io/beta">install the beta</a> to get these features right now.</p> <p>Notable new things are:</p> <ul> <li>Untitled or unsaved buffers are now automatically saved to a temporary location when closing or restarting an Atom window. View the <a href="https://github.com/atom/atom/pull/9968">pull request</a>.</li> <li>A OS X dock menu was added with a &#39;New Window&#39; option. View the <a href="https://github.com/atom/atom/pull/9606">pull request</a>.</li> </ul> <p>For now, you can check out <a href="https://github.com/atom/atom/releases/tag/v1.4.0-beta0">all the PRs</a> that went into 1.4-beta. We will talk about all the new stuff in 1.4 when it is released.</p>
</description>
<pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/12/11/atom-1-3.html"/>
<guid isPermaLink="true">http://blog.atom.io/2015/12/11/atom-1-3.html</guid>
<author>
<name>benogle</name>
</author>
</item>
<item>
<title>API Changes Coming in Electron 1.0</title>
<description>
<p>Since the beginning of Electron, starting way back when it used to be called Atom-Shell, we have been experimenting with providing a nice cross-platform JavaScript API for Chromium&#39;s content module and native GUI components. The APIs started very organically, and over time we have made several changes to improve the initial designs.</p> <p>Now with Electron gearing up for a 1.0 release, we&#39;d like to take the opportunity for change by addressing the last niggling API details. The changes described below are included in <strong>0.35.x</strong>, with the old APIs reporting deprecation warnings so you can get up to date for the future 1.0 release. An Electron 1.0 won&#39;t be out for a few months so you have some time before these changes become breaking.</p> <h2>Deprecation warnings</h2> <p>By default, warnings will show if you are using deprecated APIs. To turn them off you can set <code>process.noDeprecation</code> to <code>true</code>. To track the sources of deprecated API usages, you can set <code>process.throwDeprecation</code> to <code>true</code> to throw exceptions instead of printing warnings, or set <code>process.traceDeprecation</code> to <code>true</code> to print the traces of the deprecations.</p> <h2>New way of using built-in modules</h2> <p>Built-in modules are now grouped into one module, instead of being separated into independent modules, so you can use them <a href="https://github.com/atom/electron/issues/387">without conflicts with other modules</a>:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">app</span> <span class="kd">var</span> <span class="nx">BrowserWindow</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">BrowserWindow</span> </code></pre></div> <p>The old way of <code>require(&#39;app&#39;)</code> is still supported for backward compatibility, but you can also turn if off:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">hideInternalModules</span><span class="p">()</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span> <span class="c1">// throws error.</span> </code></pre></div> <h2>An easier way to use the <code>remote</code> module</h2> <p>Because of the way using built-in modules has changed, we have made it easier to use main-process-side modules in renderer process. You can now just access <code>remote</code>&#39;s attributes to use them:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// New way.</span> <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">remote</span><span class="p">.</span><span class="nx">app</span> <span class="kd">var</span> <span class="nx">BrowserWindow</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">remote</span><span class="p">.</span><span class="nx">BrowserWindow</span> </code></pre></div> <p>Instead of using a long require chain:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Old way.</span> <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">remote</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span> <span class="kd">var</span> <span class="nx">BrowserWindow</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">remote</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;BrowserWindow&#39;</span><span class="p">)</span> </code></pre></div> <h2>Splitting the <code>ipc</code> module</h2> <p>The <code>ipc</code> module existed on both the main process and renderer process and the API was different on each side, which is quite confusing for new users. We have renamed the module to <code>ipcMain</code> in the main process, and <code>ipcRenderer</code> in the renderer process to avoid confusion:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// In main process.</span> <span class="kd">var</span> <span class="nx">ipcMain</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">ipcMain</span> </code></pre></div><div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// In renderer process.</span> <span class="kd">var</span> <span class="nx">ipcRenderer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">ipcRenderer</span> </code></pre></div> <p>And for the <code>ipcRenderer</code> module, an extra <code>event</code> object has been added when receiving messages, to match how messages are handled in <code>ipcMain</code> modules:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">})</span> </code></pre></div> <h2>Standardizing <code>BrowserWindow</code> options</h2> <p>The <code>BrowserWindow</code> options had different styles based on the options of other APIs, and were a bit hard to use in JavaScript because of the <code>-</code> in the names. They are now standardized to the traditional JavaScript names:</p> <div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">({</span> <span class="nx">minWidth</span><span class="o">:</span> <span class="mi">800</span><span class="p">,</span> <span class="nx">minHeight</span><span class="o">:</span> <span class="mi">600</span> <span class="p">})</span> </code></pre></div> <h2>Following DOM&#39;s conventions for API names</h2> <p>The API names in Electron used to prefer camelCase for all API names, like <code>Url</code> to <code>URL</code>, but the DOM has its own conventions, and they prefer <code>URL</code> to <code>Url</code>, while using <code>Id</code> instead of <code>ID</code>. We have done the following API renames to match the DOM&#39;s styles:</p> <ul> <li><code>Url</code> is renamed to <code>URL</code></li> <li><code>Csp</code> is renamed to <code>CSP</code></li> </ul> <p>You will notice lots of deprecations when using Electron v0.35.0 for your app because of these changes. An easy way to fix them is to replace all instances of <code>Url</code> with <code>URL</code>.</p> <h2>Changes to <code>Tray</code>&#39;s event names</h2> <p>The style of <code>Tray</code> event names was a bit different from other modules so a rename has been done to make it match the others.</p> <ul> <li><code>clicked</code> is renamed to <code>click</code></li> <li><code>double-clicked</code> is renamed to <code>double-click</code></li> <li><code>right-clicked</code> is renamed to <code>right-click</code></li> </ul>
</description>
<pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/11/17/electron-api-changes.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/11/17/electron-api-changes.html
</guid>
<author>
<name>zcbenz</name>
</author>
</item>
<item>
<title>Atom 1.0 Contributor Patches</title>
<description>
<p>To celebrate our 1.0 release at the end of June this year, we produced a limited-edition patch for people that contributed to the editor leading up to this important milestone.</p> <p><img src="/img/posts/mschoening-atom-patch.jpg" alt="Atom 1.0 contributor patch"></p> <p><em>(Image courtesy <a href="https://twitter.com/mschoening/status/630783176508485632">Max Schoening</a>.)</em></p> <p>We started showing a message at the top of <a href="https://atom.io">atom.io</a> to users eligible for the patch letting them know that we wanted to send them something special. Until today, we haven&#39;t publicized it any further, because we wanted it to be a nice surprise. <img class='emoji' title=':gift_heart:' alt=':gift_heart:' src='https://assets.github.com/images/icons/emoji/unicode/1f49d.png' height='20' width='20' align='absmiddle' /> We&#39;ve sent out quite a few patches already, but before we stop producing them we wanted to let everyone know, so that contributors eligible to receive a patch don&#39;t miss out.</p> <p>So, if you:</p> <ul> <li>Published a package to <a href="https://atom.io/packages">atom.io</a> before Atom 1.0 was released on June 25, or</li> <li>contributed to <a href="https://github.com/atom/atom">atom/atom</a> or one of its bundled core packages before that date</li> </ul> <p>... you should see a header on the site that looks like this:</p> <p><img src="/img/posts/patch-header.png" alt="atom.io patch-eligible account header"></p> <p>If you contributed pre-1.0 and you don&#39;t see this header after logging in, feel free to <a href="https://atom.io/contact">get in touch</a>. We will collect addresses through the end of November, and after that we won&#39;t ever make this patch again.</p>
</description>
<pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/11/16/atom-1-contributor-patches.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/11/16/atom-1-contributor-patches.html
</guid>
<author>
<name>thedaniel</name>
</author>
</item>
<item>
<title>Atom 1.2</title>
<description>
<p>Two weeks ago we released Atom 1.1.0 which was first stable release to pass through the new Atom <a href="https://atom.io/beta">beta</a> channel. We&#39;d like to keep up the release cadence and get new things into your hands as quickly as we can. Today, we&#39;re proud to announce Atom 1.2 stable and 1.3.0-beta0.</p> <h2>The Big Changes in 1.2.0 Stable</h2> <h3>CJK softwrap</h3> <p>Atom 1.2.0 wraps CJK characters.</p> <p><img src="https://cloud.githubusercontent.com/assets/482957/10524695/31cfbf36-7381-11e5-981b-114a0cafee7c.gif" alt="cjkwrap"></p> <p>See <a href="https://github.com/atom/atom/pull/9162">the PR</a> for more details.</p> <h3>Upgrade to Electron 0.34.0</h3> <p>Atom 1.2.0 stable is on the latest minor version of Electron which uses Chrome 45 and node 4.1.1. This upgrade was a large jump from 0.30.x included in Atom 1.1.0 which used Chrome 44 and node 3.1.x. The new version of electron brings greater stability and fixes a couple of <a href="https://github.com/atom/atom/issues/3593">pretty</a> <a href="https://github.com/atom/atom/issues/7061">bad</a>, long-standing bugs.</p> <p>See the pull requests for more information: <a href="https://github.com/atom/atom/pull/8779">atom/atom#8779</a> and <a href="https://github.com/atom/atom/pull/9184">atom/atom#9184</a>.</p> <h3>Custom Package Testing Environment</h3> <p>Want to run your package specs with something other than jasmine 1.3? Now you can specify your own test runner. See <a href="https://github.com/atom/atom/pull/8968">the PR</a> and <a href="https://github.com/atom/docs/blob/92f3f4d419472963ec9050d867edf1da077f76cd/book/03-hacking-atom/sections/A02-writing-specs.asc#customizing-your-test-runner">the docs</a> for more information.</p> <h3>Fixed crashing when opening files in some cases</h3> <p>Atom was crashing when opening files from git repos with submodules <a href="https://github.com/atom/atom/issues/9339">in some cases</a>. The solution was to <a href="https://github.com/atom/atom/pull/9471">upgrade git-utils</a>. As of Atom 1.2.0 stable, you should no longer experience this crash.</p> <h3>Tree View speed and API improvements</h3> <p>As of 1.2.0, the tree-view is faster <a href="https://github.com/atom/tree-view/pull/616">with many files</a> and has an <a href="https://github.com/atom/tree-view#api">API</a> to specify icons next to files.</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/11129168/addcbbe4-8932-11e5-9baf-ac567fd7dc03.png" alt="file-icons"></p> <p>Previous to this API, packages like <a href="https://atom.io/packages/file-icons">file-icons</a> were using hacks to replace the icons. Check out the <a href="https://github.com/atom/tree-view#api">API docs</a> for more information.</p> <h2>Available now in Atom 1.3.0-beta0</h2> <p>With another stable release comes another <a href="https://atom.io/beta">beta</a>. Note that you can always <a href="https://atom.io/beta">install the beta</a> to get these features right now. Here is a preview of the big things going into 1.3.0.</p> <h3>Startup speed improvements</h3> <p>One of the team focuses has been improving performance, and we&#39;re happy to report that we&#39;ve been making great progress in the startup department. All in, these changes contribute to a <strong>20% - 30% speedup</strong> depending on how many packages you have installed. We&#39;ll go into more depth in another post, but if you&#39;re interested, check out the pull requests.</p> <ul> <li><a href="https://github.com/atom/atom/pull/9318">NativeCompileCache</a></li> <li><a href="https://github.com/atom/atom/pull/9468">Unfold all improvements</a></li> <li><a href="https://github.com/atom/atom/pull/9507">Lazyload of snippets</a></li> <li><a href="https://github.com/atom/atom/pull/9508">Improved config loading</a>, and <a href="https://github.com/atom/atom/pull/9524">even more improvement</a></li> </ul> <h3>Marker (find and replace!) speed improvements</h3> <p>Along the performance improvement theme, we&#39;ve been focusing on improving the data structures related to markers. Markers are pretty core to Atom&mdash;they are the underpinnings for cursors, selections, the autocomplete suggestion box, and find result markers. Making them fast will improve performance for all of these cases, especially when there are tons of markers defined. Similar to the startup improvements, we&#39;ll write an in-depth blog post on the topic.</p> <ul> <li><a href="https://github.com/atom/atom/pull/9426">Marker layers, and a treap-based marker index</a></li> </ul> <h3>Portable mode</h3> <p>Windows portable mode has been a <a href="https://github.com/atom/atom/issues/2939">heavily requested feature</a> for a long time. Atom 1.3.0-beta0 has a portable mode for Windows <em>and</em> Linux (with Mac on the way).</p> <ul> <li><a href="https://github.com/atom/atom/pull/8442">Portable mode for Windows</a></li> <li><a href="https://github.com/atom/atom/pull/9422">Portable mode for Linux</a></li> <li><a href="https://github.com/atom/atom/pull/9419">A command line param to setup a portable .atom directory</a></li> </ul> <h3>Upgrade to Electron 0.34.3</h3> <p>Atom 1.3.0-beta0 is on <a href="https://github.com/atom/atom/pull/9481">Electron 0.34.3</a>, bringing it up to the latest and greatest version.</p> <h2>Until next time</h2> <p>We&#39;re continuing to crank away at performance and heavily requested features. Atom 1.3 is just around the corner, and along with it will come a new beta with more improvements. Additionally, we&#39;re excited to share in-depth explanations of the performance work and detailed metrics on the improvements.</p>
</description>
<pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/11/12/atom-1-2.html"/>
<guid isPermaLink="true">http://blog.atom.io/2015/11/12/atom-1-2.html</guid>
<author>
<name>benogle</name>
</author>
</item>
<item>
<title>Mac App Store and Windows Auto Updater on Electron</title>
<description>
<p>Recently Electron added two exciting features: a Mac App Store compatible build and a built-in Windows auto updater.</p> <h2>Mac App Store Support</h2> <p><img src='https://cloud.githubusercontent.com/assets/1305617/10928574/a301640c-825e-11e5-918e-a06b7a55dcb4.png' width="300"></p> <p>As of <code>v0.34.0</code> each Electron release includes a build compatible with the Mac App Store. Previously an application built on Electron would not comply with Apple&#39;s requirements for the Mac App Store. Most of these requirements are related to the use of private APIs. In order to sandbox Electron in such a way that it complies with the requirements two modules needed to be removed:</p> <ul> <li><code>crash-reporter</code></li> <li><code>auto-updater</code></li> </ul> <p>Additionally some behaviors have changed with respect to detecting DNS changes, video capture and accessibility features. You can read more about the changes and <a href="http://electron.atom.io/docs/latest/tutorial/mac-app-store-submission-guide">submitting your app to the Mac App store</a> in the documentation. The distributions can be found on the <a href="https://github.com/atom/electron/releases">Electron releases page</a>, prefixed with <code>mas-</code>.</p> <p>Related Pull Requests: <a href="https://github.com/atom/electron/pull/3108">atom/electron#3108</a>, <a href="https://github.com/atom/electron/pull/2920">atom/electron#2920</a></p> <h2>Windows Auto Updater</h2> <p>In Electron <code>v0.34.1</code> the <code>auto-updater</code> module was improved in order to work with <a href="https://github.com/Squirrel/Squirrel.Windows"><code>Squirrel.Windows</code></a>. This means that Electron ships with easy ways for auto updating your app on both OS X and Windows. You can read more on <a href="https://github.com/atom/electron/blob/master/docs/api/auto-updater.md#windows">setting up your app for auto updating on Windows</a> in the documentation.</p> <p>Related Pull Request: <a href="https://github.com/atom/electron/pull/1984">atom/electron#1984</a></p>
</description>
<pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/11/05/electron-updates-mac-app-store-and-windows-auto-updater.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/11/05/electron-updates-mac-app-store-and-windows-auto-updater.html
</guid>
<author>
<name>jlord</name>
</author>
</item>
<item>
<title>MuleSoft's New API Workbench is built on Atom</title>
<description>
<p>A big part of the mission behind Atom is to create a shared community foundation on which people can build amazing developer tools. We&#39;d like to occasionally showcase new and interesting things built on top of Atom.</p> <p>One of the latest projects to harness the extensibility and power of Atom is MuleSoft&#39;s new <a href="http://apiworkbench.com">API Workbench</a>.</p> <p>API Workbench is designed to help developers design, build, test, document and share REST APIs. With integrated tools that promote reusability and consistency, it helps add simplicity and structure to every part of the API management process. API Workbench marries the core editing and design tools that API developers need with the more modern capabilities they’ve come to expect. And since API Workbench is built around <a href="http://raml.org/">RAML</a>, it uses a design-first approach that promotes longer-term efficiency.</p> <p>Here’s how Uri Sarid, MuleSoft CTO, explains it:</p> <blockquote> <p>&quot;The API economy is here and growing, with APIs transforming into significant business drivers across industries. A key success to making the API economy work is to have good API design from the beginning&mdash;an approach that is championed by the thriving RAML community. By contributing API Workbench to the RAML community, we’re building on our commitment to RAML and its design-first approach to APIs. The slick new IDE aligns with RAML’s primary design principle to be as simple as possible to write and read APIs, and to promote reusability and consistency.”</p> </blockquote> <p>MuleSoft has built a ton of intelligence and automation around creating and consuming APIs with RAML. Here are a few features we really liked:</p> <ul> <li>An interactive API console</li> <li>Graphical API creation tools</li> <li>Live RAML debugging</li> <li>RAML autocomplete support</li> <li>RAML refactoring tools</li> <li>Integration with the community-built <a href="https://atom.io/packages/linter">linter</a> for RAML</li> </ul> <p><img src="https://cloud.githubusercontent.com/assets/69169/10899323/80668db8-8188-11e5-81be-cdb6569841fd.png" alt="apiworkbenchcrop"></p> <p>Check it out at <a href="http://apiworkbench.com">APIworkbench.com</a>.</p>
</description>
<pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/11/03/mulesoft-releases-api-workbench-built-on-atom.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/11/03/mulesoft-releases-api-workbench-built-on-atom.html
</guid>
<author>
<name>yourfrienderin</name>
</author>
</item>
<item>
<title>Atom 1.1 is out</title>
<description>
<p>Today we are excited to announce Atom 1.1.0. It comes with many improvements and marks the first stable release to pass through the new Atom <a href="http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html">beta channel</a>. Let&#39;s dig in.</p> <h2>The Big Changes in 1.1.0 Stable</h2> <h3>New Approach to Character Measurement</h3> <p>Check out the <a href="https://github.com/atom/atom/pull/8811">pull request</a>.</p> <p>Atom needs to measure runs of text on screen to absolutely position the cursor, selections, highlights, and overlay decorations such as the autocomplete suggestion box. Chrome does not have a text measurement API at this time, so we need to measure text from the DOM. The problem with measuring from the DOM is that it forces a reflow, and these measurement-triggered reflows were a major source of slowness in early versions of Atom.</p> <p>To solve this, we avoided DOM measurement in most cases when computing pixel positions by caching the widths of each character in different styling contexts. Whenever we needed a horizontal position to absolutely position an element, we iterated through the characters on the relevant line and computed a total based on lookups in our cache.</p> <p>This avoided any synchronous dependency on the DOM, but it also ignored the important fact that characters can have different widths depending on their context. This is most obviously true with <a href="https://github.com/atom/atom/issues/3821">ligatures</a>, <a href="https://github.com/atom/atom/issues/6307">emoji</a>, and <a href="https://github.com/atom/atom/issues/3345">variable-width fonts</a>, but it started happening even for fixed-width fonts when sub-pixel font scaling was enabled in Chrome, forcing us to patch Electron for a few releases to disable it.</p> <p>Before settling on our current solution, we tried other ways of getting correct measurements while still avoiding DOM reads, such as measuring text runs <a href="https://github.com/atom/atom/pull/6083">via the canvas API</a> or in <a href="https://github.com/atom/atom/pull/7945">an off-screen iframe</a>. We even contemplated abandoning absolute positioning and tried clever hacks so things could be positioned by the DOM.</p> <p>But in the end, we settled back on measuring these positions from the DOM directly, this time in a more deliberate and controlled way. Early on, reflows were the bane of our existence, so we really bent over backwards to avoid any forced layouts. It turns out that was too extreme of an approach. We now split our DOM updates into two phases. First, we render everything that doesn&#39;t require absolute positioning, then we measure, forcing a reflow. Now, with measurements in hand, we proceed with a second phase of the update. Since we don&#39;t mutate the elements we rendered in the first phase, the second layout ends up being less expensive, and by combining this approach with some improvements to our layout and style recalculation times, we found room for direct measurement in our 16ms frame budget.</p> <h4>Using Fonts with Ligatures</h4> <p>Now you can use fonts containing <a href="https://en.wikipedia.org/wiki/Typographic_ligature">ligatures</a> like <a href="http://larsenwork.com/monoid/">monoid</a>, <a href="https://github.com/tonsky/FiraCode">FiraCode</a> and <a href="https://github.com/i-tu/Hasklig">Hasklig</a>.</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/10746777/917b9274-7c0b-11e5-8c82-49c10b17a05d.png" alt="."></p> <p>After installing a font that supports ligatures, you can enable them by adding the following to <a href="https://atom.io/docs/latest/using-atom-basic-customization#style-tweaks">your stylesheet</a>:</p> <div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">atom-text-editor</span> <span class="p">{</span> <span class="k">text</span><span class="o">-</span><span class="n">rendering</span><span class="o">:</span> <span class="n">optimizeLegibility</span><span class="p">;</span> <span class="p">}</span> </code></pre></div> <p>This CSS is the minimum to enable ligatures, but there may be more options your font of choice exposes to CSS. Check out <a href="https://medium.com/@larsenwork/ligatures-coding-fonts-5375ab47ef8e">Ligatures &amp; Coding</a> and <a href="http://ricostacruz.com/til/css-ligatures.html">CSS Ligatures</a> for more information.</p> <p>Note that there is a limitation with FiraCode and Hasklig that does not allow placing the cursor between combined ligature characters like <code>-&gt;</code>. This is a limitation in the Chrome DOM measurement API. <a href="http://larsenwork.com/monoid/">monoid</a> does not have this limitation due to the way it implements ligatures.</p> <h4>Using Variable Width Fonts</h4> <p>You can also use variable width fonts like Helvetica or Times New Roman in Atom&#39;s text editor component. Maybe not so interesting in your code editor:</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/10746140/31defd70-7c05-11e5-91aa-45593330fc9c.png" alt="helvetica"></p> <p>But a number of UI themes like <a href="https://atom.io/themes/unity-ui">Unity-UI</a> set the mini-editor font to a variable width font. Now this works without cursor positioning problems.</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/10746142/31e11dee-7c05-11e5-928b-3d1698ddea17.png" alt="."></p> <h3>Reduced GC Pauses When Scrolling Editor</h3> <p>Previous to Atom 1.1.0, Atom was allocating all new DOM nodes for any new text rendered on screen. In this release, we&#39;ve <a href="https://github.com/atom/atom/pull/8783">implemented a DOM-node pool</a> that reuses DOM nodes whenever we can. This creates less pressure on the garbage collector and leads to less GC pauses when using the editor.</p> <p>We also identified and fixed <a href="https://github.com/atom/atom/pull/9067">a memory leak</a> which should help improve our memory situation when scrolling.</p> <h3>New Fuzzy Search Options</h3> <p>There have been a <a href="https://github.com/atom/fuzzy-finder/issues/57">number</a> <a href="https://github.com/atom/fuzzy-finder/issues/41">of</a> <a href="https://github.com/atom/fuzzy-finder/issues/138">reports</a> <a href="https://github.com/atom/autocomplete-plus/issues/564">regarding</a> the <a href="https://github.com/atom/autocomplete-plus/issues/42">quality</a> of the fuzzy searching algorithm <a href="https://github.com/atom/fuzzaldrin">Atom uses</a> in fuzzy-finder and autocomplete-plus.</p> <p>Community member <a href="https://github.com/jeancroy">@jeancroy</a> has taken on fixing these issues with a new fuzzy matching library called <a href="https://github.com/jeancroy/fuzzaldrin-plus">fuzzaldrin-plus</a>. He has integrated the new library into fuzzy-finder and autocomplete-plus behind a config setting. To turn on the new algorithm, navigate to the settings page for both autocomplete-plus and fuzzy-finder, then check the &quot;Use Alternate Scoring&quot; setting.</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/10746464/90bf8ffa-7c08-11e5-8dca-81e9c21dc496.png" alt="."></p> <p>If you have issues with the new scoring algorithm, please let us know by submitting an issue on the <a href="https://github.com/jeancroy/fuzzaldrin-plus">fuzzaldrin-plus</a> repo.</p> <h3>Themed Markdown Preview</h3> <p>Markdown preview <a href="https://github.com/atom/markdown-preview/pull/298">now adapts</a> to the installed syntax theme.</p> <p><img src="https://cloud.githubusercontent.com/assets/378023/9629606/e1de7682-51ae-11e5-97cb-b702ec6cb43b.png" alt="."></p> <p>Maybe you would rather have the preview match GitHub&#39;s markdown rendering? Markdown preview now has a &quot;Use GitHub.com styles&quot; setting that uses a white background and GitHub styles no matter the syntax theme.</p> <p><img src="https://cloud.githubusercontent.com/assets/378023/9629635/21ddbe50-51af-11e5-9639-663906d689ef.png" alt="ghstyles"></p> <p>Check out <a href="https://github.com/atom/markdown-preview/pull/298">the PR</a>.</p> <h3>Several Find and Replace Fixes</h3> <ul> <li>Added regex replacement highlighting thanks to community member <a href="https://github.com/adamfranco">@adamfranco</a>: <a href="https://github.com/atom/find-and-replace/pull/494">atom/find-and-replace#494</a></li> <li>Keyboard navigation in the project search results pane has been improved: <a href="https://github.com/atom/find-and-replace/pull/498">atom/find-and-replace#498</a> and <a href="https://github.com/atom/find-and-replace/pull/531">atom/find-and-replace#531</a></li> <li>A &quot;Find&quot; button has been added to the project find panel: <a href="https://github.com/atom/find-and-replace/pull/509">atom/find-and-replace#509</a></li> <li>Disabled button tooltips in the find panel have been fixed. Many people reported issues with this: <a href="https://github.com/atom/find-and-replace/pull/542">atom/find-and-replace#542</a></li> </ul> <h2>Available now in Atom 1.2.0-beta</h2> <p>Along with the new stable release, we&#39;ve <a href="http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html">rolled the changes</a> from the master branch into a new beta release. You can <a href="https://atom.io/beta">install the beta</a> to get these features right now. We&#39;ll get into more detail when we release 1.2.0 stable, but here is a preview.</p> <h3>CJK softwrap</h3> <p>Atom now properly wraps CJK characters!</p> <p><img src="https://cloud.githubusercontent.com/assets/482957/10524695/31cfbf36-7381-11e5-981b-114a0cafee7c.gif" alt="cjkwrap"></p> <p>See <a href="https://github.com/atom/atom/pull/9162">the PR</a> for more details.</p> <h3>Upgrade to Electron 0.34.x</h3> <p>This brings Atom up to the latest version of Electron and fixes a couple of <a href="https://github.com/atom/atom/issues/3593">pretty</a> <a href="https://github.com/atom/atom/issues/7061">bad</a>, long-standing bugs.</p> <p>See the PRs for more information: <a href="https://github.com/atom/atom/pull/8779">atom/atom#8779</a> and <a href="https://github.com/atom/atom/pull/9184">atom/atom#9184</a>.</p> <h3>Custom Package Testing Environment</h3> <p>Want to run your package specs with something other than jasmine 1.3? Now you can specify your own test runner. See <a href="https://github.com/atom/atom/pull/8968">the PR</a> and <a href="https://github.com/atom/docs/pull/133">the portential docs</a> for more information. Note that this is still in flux!</p> <h3>Settings Have Nice Descriptions</h3> <p>Many of the settings in the settings view lacked descriptions which lead to confusion. In the latest beta, descriptions have been added to all core settings and all settings from bundled packages.</p> <p><img src="https://cloud.githubusercontent.com/assets/38924/10392228/787d4c9c-6e85-11e5-946a-7ee4b2d4b70f.png" alt="."></p> <p>See <a href="https://github.com/atom/atom/pull/9096">the PR</a> for more information.</p>
</description>
<pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/10/29/atom-1-1-is-out.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/10/29/atom-1-1-is-out.html
</guid>
<author>
<name>benogle</name>
</author>
</item>
<item>
<title>Introducing the Atom Beta Channel</title>
<description>
<p><img src="/img/posts/atom-beta-heading.jpg" alt="Beta Hero"></p> <p>This week, we&#39;re introducing a <a href="https://atom.io/beta">beta release channel for Atom</a> and making some changes to our development workflow to improve productivity and the stability of releases. Instead of cutting releases directly from the master branch as we&#39;ve done in the past, all changes will now spend time being tested in a beta phase, giving us more time to catch any regressions that slip through our automated test suite before releasing them to the world. If you like to live on the bleeding edge, using Atom Beta as your main editor is a great way to help us improve Atom. In exchange for encountering and reporting on occasional bugs, you&#39;ll gain faster access to new features and performance improvements.</p> <h2>The Problem</h2> <p>Releasing straight from master worked pretty well for a while. It kept our mental model simple and minimized the time for getting improvements into the hands of users. Unfortunately, when regressions found their way into master, releasing directly off our development branch caused major disruptions in our workflow.</p> <p>Often, a day or more would pass between a release and the discovery of some corner-case regression by a user. In the meantime, we might have merged another large pull request into master, leaving ourselves in a situation where in order to ship a fix the original regression, we needed to also ship a bunch of new code that had been on master for a very short amount of time, presenting the risk of yet more regressions.</p> <p>In response to this kind of scenario, we started being much more cautious about merging code into master following a release, and when releasing large changes, this delay could easily extend for several days. This introduced coordination overhead, because now in order to merge a pull request, it wasn&#39;t enough to know the code was ready. It was also important to know whether or not we had released recently and how likely that release was to contain a regression. These delays also introduced integration risk by delaying the opportunity to test multiple pull requests in combination with one another.</p> <p>Finally, in the old system, new code only spent a very short amount of time in front of a very small and homogenous audience before being released to the world. We needed a way to test changes with a bigger, more diverse set of users, but still a group that had self-selected and was willing to experience a bit of instability.</p> <h2>The Solution</h2> <p>If you&#39;ve read about how the <a href="https://docs.google.com/presentation/d/1uv_dNkPVlDFG1kaImq7dW-6PasJQU1Yzpj5IKG_2coA/present?slide=id.i0">Chrome</a> and <a href="http://blog.rust-lang.org/2014/10/30/Stability.html">Rust</a> teams handle their releases, our new strategy should sound familiar. We&#39;re introducing two new branches, <code>beta</code>, corresponding to the new Atom Beta release channel, and <code>stable</code>, from which all general Atom releases will be built.</p> <p><img src="/img/posts/release-pipeline-diagram.png" alt="Diagram"></p> <p>At a regular cadence, we&#39;ll merge the latest changes from <code>master</code> into <code>beta</code> and cut a new release on the beta channel with a pre-release version number. For example, our first beta release was <code>1.1.0-beta0</code>. New development will continue on <code>master</code>, but if we get reports of any regressions on the beta channel, we can fix them directly on <code>beta</code> and cut a new release with an incremented version number, such as <code>1.1.0-beta1</code>, <code>1.1.0-beta2</code>, etc.</p> <p>When we feel beta has stabilized, we&#39;ll merge the contents of the <code>beta</code> branch into <code>stable</code> and cut a new stable release with a version derived by removing the <code>betaN</code> pre-release suffix. Then we will again merge new changes from <code>master</code> into <code>beta</code>, repeating the cycle. We plan to bump the minor version on every stable release, and if we need to fix regressions that survive through the beta phase, we&#39;ll bump the patch number and re-release on stable to fix them.</p> <p>The key idea is that as code makes its way through this pipeline, it becomes increasingly stable, because riskier changes on master don&#39;t affect <code>beta</code> and <code>stable</code>. These branches only get bug fixes, which means that users on the stable channel experience fewer bugs.</p> <h2>A Note To Package Authors</h2> <p>One thing worth noting is that as a package author, please always favor your packages working correctly on Atom&#39;s stable channel. If there&#39;s a new API you&#39;d like to use in beta, consider adding some conditional code so your package works on both channels. Alternatively, you could publish a pre-release version of your package and prevent it from being installed on the previous stable channel release by specifying the version range in the <code>engines</code> field of your <code>package.json</code> to include a specific beta channel version but excludes stable, such as <code>^1.1.0-beta1</code>.</p> <h2>Help Wanted</h2> <p>We hope you&#39;ll consider giving <a href="https://atom.io/beta">Atom Beta</a> a spin. Usually, you should find that it&#39;s a better experience, with features and performance improvements that haven&#39;t been released yet on our stable channel. Every now and then you&#39;ll find a bug. <a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues">Please report it!</a> Then switch back to the stable channel until we have a chance to issue a patch release. With your help, we can improve the stability of Atom&#39;s releases even as we accelerate the pace of development.</p>
</description>
<pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html
</guid>
<author>
<name>nathansobo</name>
</author>
</item>
<item>
<title>Making your first Atom contribution</title>
<description>
<p>Atom is a large open source project&mdash;it is made up of over <a href="https://github.com/atom">200 repos</a>, and there are over <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+user%3Aatom">3400 open issues</a> across all repos. As with most large open source projects, knowing where to start contributing can be overwhelming.</p> <p>When initially digging in, you might have questions like: Which of those 200 repos even implements the functionality that I want to change? Which issues are a good first foray into Atom development? Hopefully this post can shed some light.</p> <h2>Atom&#39;s Composition</h2> <p>Atom is intentionally very modular. Nearly every non-editor UI element you interact with comes from a package, even seemingly core things like tabs and the status-bar. These packages are packages in the same way that packages in the <a href="https://atom.io/packages">package store</a> are packages, with one difference: they are bundled into the <a href="https://github.com/atom/atom/blob/10b8de6fc499a7def9b072739486e68530d67ab4/package.json#L58">default distribution</a>.</p> <p><img src="https://cloud.githubusercontent.com/assets/69169/10472281/84fc9792-71d3-11e5-9fd1-19da717df079.png" alt="atom-packages"></p> <p>Here&#39;s a list of the big ones:</p> <ul> <li><a href="https://github.com/atom/atom">atom/atom</a> - Atom Core!</li> <li><a href="https://github.com/atom/tree-view">tree-view</a> - file and directory listing on the left of the UI</li> <li><a href="https://github.com/atom/fuzzy-finder">fuzzy-finder</a> - the quick file open chooser; <code>cmd-t</code></li> <li><a href="https://github.com/atom/find-and-replace">find-and-replace</a> - all find and replace functionality</li> <li><a href="https://github.com/atom/tabs">tabs</a> - a display for the tabs of open editors</li> <li><a href="https://github.com/atom/status-bar">status-bar</a> - the status bar at the bottom of the UI</li> <li><a href="https://github.com/atom/markdown-preview">markdown-preview</a> - rendered markdown pane item</li> <li><a href="https://github.com/atom/settings-view">settings-view</a> - settings UI pane item</li> <li><a href="https://github.com/atom/autocomplete-plus">autocomplete-plus</a> - autocompletions while typing</li> <li><a href="https://github.com/atom/git-diff">git-diff</a> - git diff gutter colorization in the editor</li> <li><a href="https://github.com/atom/language-javascript">language-javascript</a> - all bundled languages are packages too</li> </ul> <p>There are many more, but this list should be a good starting point.</p> <h2>Where to start contributing</h2> <p>We&#39;ve labeled a number of issues across the atom org with two labels: <code>help-wanted</code> and <code>beginner</code>. Our goal with these is to provide a short-ish list of issues that are straightforward in what needs to be done. They may not all be <em>easy</em> but they hopefully are easy to grok, and clear in the desired end result.</p> <ul> <li><a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3Abeginner+label%3Ahelp-wanted+user%3Aatom+sort%3Acomments-desc">Beginner issues</a></li> <li><a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted+user%3Aatom+sort%3Acomments-desc">Help wanted issues</a></li> </ul> <p><code>beginner</code> issues are a subset of <code>help-wanted</code>. They should only require a few lines of code, and a test or two. <code>help-wanted</code> issues not tagged <code>beginner</code> will be a little more involved.</p> <p>Both issue lists are sorted by total number of comments. While not perfect, number of comments is a reasonable proxy for impact a given change will have.</p> <h2>Tips</h2> <p>Here are a couple tips to help you write a successful PR:</p> <ul> <li>Blend in - take a peek at other code in the codebase, read through the <a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#coffeescript-styleguide">styleguide</a>, and avoid adding new dependencies. When code isn&#39;t in a similar style, there will be a lot of back and forth with the PR reviewer concerning little nits.</li> <li>Write specs (tests) - we only accept changes and new functionality covered by specs. So be sure to add a spec or two, otherwise the first thing we&#39;ll ask you to do is add specs.</li> <li>See more tips in the <a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#pull-requests">contributing guide</a></li> </ul> <h2>Onward</h2> <p>Hopefully you have a better handle on where to start. If you find any of these issues lacking in clarity, feel free to ping us (or me: <a href="https://github.com/benogle">@benogle</a>) and we&#39;ll be happy to provide more info. We&#39;re looking forward to seeing what you come up with!</p>
</description>
<pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/10/16/making-your-first-contribution.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/10/16/making-your-first-contribution.html
</guid>
<author>
<name>benogle</name>
</author>
</item>
<item>
<title>What's New in Electron</title>
<description>
<p>There have been some interesting updates and talks given on Electron recently, here&#39;s a roundup.</p> <h2>Source</h2> <p>Electron is now up to date with Chrome 45 as of <code>v0.32.0</code>. Other updates include...</p> <h3>Better Documentation</h3> <p><img src="https://cloud.githubusercontent.com/assets/1305617/10520600/d9dc0ae8-731f-11e5-9bd7-c1651639eb2a.png" alt="new docs"></p> <p>We have restructured and standardized the documentation to look better and read better. There are also community-contributed translations of the documentation, like Japanese and Korean.</p> <p>Related pull requests: <a href="https://github.com/atom/electron/pull/2028">atom/electron#2028</a>, <a href="https://github.com/atom/electron/pull/2533">atom/electron#2533</a>, <a href="https://github.com/atom/electron/pull/2557">atom/electron#2557</a>, <a href="https://github.com/atom/electron/pull/2709">atom/electron#2709</a>, <a href="https://github.com/atom/electron/pull/2725">atom/electron#2725</a>, <a href="https://github.com/atom/electron/pull/2698">atom/electron#2698</a>, <a href="https://github.com/atom/electron/pull/2649">atom/electron#2649</a>.</p> <h3>Node.js 4.1.0</h3> <p>Since <code>v0.33.0</code> Electron ships with Node.js 4.1.0.</p> <p>Related pull request: <a href="https://github.com/atom/electron/pull/2817">atom/electron#2817</a>.</p> <h3>node-pre-gyp</h3> <p>Modules relying on <code>node-pre-gyp</code> can now be compiled against Electron when building from source.</p> <p>Related pull request: <a href="https://github.com/mapbox/node-pre-gyp/pull/175">mapbox/node-pre-gyp#175</a>.</p> <h3>ARM Support</h3> <p>Electron now provides builds for Linux on ARMv7. It runs on popular platforms like Chromebook and Raspberry Pi 2.</p> <p>Related issues: <a href="https://github.com/atom/libchromiumcontent/pull/138">atom/libchromiumcontent#138</a>, <a href="https://github.com/atom/electron/pull/2094">atom/electron#2094</a>, <a href="https://github.com/atom/electron/issues/366">atom/electron#366</a>.</p> <h3>Yosemite-style Frameless Window</h3> <p><img src="https://cloud.githubusercontent.com/assets/184253/9849445/7397d308-5aeb-11e5-896f-08ac7693c8c0.png" alt="frameless window"></p> <p>A patch by <a href="https://github.com/jaanus">@jaanus</a> has been merged that, like the other built-in OS X apps, allows creating frameless windows with system traffic lights integrated on OS X Yosemite and later.</p> <p>Related pull request: <a href="https://github.com/atom/electron/pull/2776">atom/electron#2776</a>.</p> <h3>Google Summer of Code Printing Support</h3> <p>After the Google Summer of Code we have merged patches by <a href="https://github.com/hokein">@hokein</a> to improve printing support, and add the ability to print the page into PDF files.</p> <p>Related issues: <a href="https://github.com/atom/electron/pull/2677">atom/electron#2677</a>, <a href="https://github.com/atom/electron/pull/1935">atom/electron#1935</a>, <a href="https://github.com/atom/electron/pull/1532">atom/electron#1532</a>, <a href="https://github.com/atom/electron/issues/805">atom/electron#805</a>, <a href="https://github.com/atom/electron/pull/1669">atom/electron#1669</a>, <a href="https://github.com/atom/electron/pull/1835">atom/electron#1835</a>.</p> <h2>Atom</h2> <p>Atom has now upgraded to Electron <code>v0.30.6</code> running Chrome 44. An upgrade to <code>v0.33.0</code> is in progress on <a href="https://github.com/atom/atom/pull/8779">atom/atom#8779</a>.</p> <h2>Talks</h2> <p>GitHubber <a href="https://github.com/ammeep">Amy Palamountain</a> gave a great introduction to Electron in a talk at <a href="https://nordicjs2015.confetti.events">Nordic.js</a>. She also created the <a href="https://github.com/ammeep/electron-accelerator">electron-accelerator</a> library.</p> <h4>Building native applications with Electron by Amy Palomountain</h4> <iframe width="560" height="315" src="https://www.youtube.com/embed/OHOPSvTltPI" frameborder="0" allowfullscreen></iframe> <p><a href="https://github.com/benogle">Ben Ogle</a>, also on the Atom team, gave an Electron talk at <a href="http://yapcasia.org/2015/">YAPC Asia</a>:</p> <h4>Building Desktop Apps with Web Technologies by Ben Ogle</h4> <iframe width="560" height="315" src="https://www.youtube.com/embed/WChjh5zaUdw" frameborder="0" allowfullscreen></iframe> <p>Atom team member <a href="https://github.com/kevinsawicki">Kevin Sawicki</a> and others gave talks on Electron at the <a href="http://www.meetup.com/Bay-Area-Electron-User-Group/">Bay Are Electron User Group</a> meetup recently. The <a href="http://www.wagonhq.com/blog/electron-meetup">videos</a> have been posted, here are a couple:</p> <h4>The History of Electron by Kevin Sawicki</h4> <iframe width="560" height="315" src="https://www.youtube.com/embed/tP8Yp1boQ9c" frameborder="0" allowfullscreen></iframe> <h4>Making a web app feel native by Ben Gotow</h4> <iframe width="560" height="315" src="https://www.youtube.com/embed/JIRXVGVPzn8" frameborder="0" allowfullscreen></iframe>
</description>
<pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
<link href="http://blog.atom.io/2015/10/15/2015-whats-new-in-electron.html"/>
<guid isPermaLink="true">
http://blog.atom.io/2015/10/15/2015-whats-new-in-electron.html
</guid>
<author>
<name>jlord</name>
</author>
</item>
</channel>
</rss>
